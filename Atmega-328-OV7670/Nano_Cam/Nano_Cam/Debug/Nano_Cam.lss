
Nano_Cam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001373  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a37  00000000  00000000  0000173f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000773  00000000  00000000  00002176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000028ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b1  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000077e  00000000  00000000  00002f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0000371b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	52 44       	sbci	r21, 0x42	; 66
  6a:	59 00       	.word	0x0059	; ????

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
		}
	}
#endif
}
int main(void){
	cli();//disable interrupts
  84:	f8 94       	cli
	/* Setup the 8mhz PWM clock 
	 * This will be on pin 11*/
	DDRB|=(1<<3);//pin 11
  86:	23 9a       	sbi	0x04, 3	; 4
	ASSR &= ~( _BV(EXCLK) | _BV(AS2));
  88:	e6 eb       	ldi	r30, 0xB6	; 182
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 79       	andi	r24, 0x9F	; 159
  90:	80 83       	st	Z, r24
	TCCR2A=(1<<COM2A0)|(1<<WGM21)|(1<<WGM20);
  92:	83 e4       	ldi	r24, 0x43	; 67
  94:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B=(1<<WGM22)|(1<<CS20);
  98:	89 e0       	ldi	r24, 0x09	; 9
  9a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A=0;//(F_CPU)/(2*(X+1))
  9e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	DDRC&=~15;//low d0-d3 camera
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	87 b9       	out	0x07, r24	; 7
	DDRD&=~252;//d7-d4 and interrupt pins
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	83 70       	andi	r24, 0x03	; 3
  ac:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	8b e7       	ldi	r24, 0x7B	; 123
  b2:	92 e9       	ldi	r25, 0x92	; 146
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x30>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3a>
  be:	00 00       	nop
	_delay_ms(3000);
	//set up twi for 100khz
	TWSR&=~3;//disable prescaler for TWI
  c0:	e9 eb       	ldi	r30, 0xB9	; 185
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8c 7f       	andi	r24, 0xFC	; 252
  c8:	80 83       	st	Z, r24
	TWBR=72;//set to 100khz
  ca:	88 e4       	ldi	r24, 0x48	; 72
  cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//enable serial
	UBRR0H=0;
  d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L=1;//0 = 2M baud rate. 1 = 1M baud. 3 = 0.5M. 7 = 250k 207 is 9600 baud rate.
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A|=2;//double speed aysnc
  da:	e0 ec       	ldi	r30, 0xC0	; 192
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);//Enable receiver and transmitter
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C=6;//async 1 stop bit 8bit char no parity bits
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	camInit();
  f0:	0e 94 22 01 	call	0x244	; 0x244 <_Z7camInitv>
#define useVga
//#define useQvga
//#define useQqvga

static inline void serialWrB(uint8_t dat){
	while(!( UCSR0A & (1<<UDRE0)));//wait for byte to transmit
  f4:	c0 ec       	ldi	r28, 0xC0	; 192
  f6:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0=dat;
  f8:	06 ec       	ldi	r16, 0xC6	; 198
  fa:	10 e0       	ldi	r17, 0x00	; 0
			while(!( UCSR0A & (1<<UDRE0)));//wait for byte to transmit
		}
	}
#endif
}
int main(void){
  fc:	e8 e6       	ldi	r30, 0x68	; 104
  fe:	f0 e0       	ldi	r31, 0x00	; 0
	return UDR0;
	
}
static void StringPgm(const char * str){
	do{
		serialWrB(pgm_read_byte_near(str));
 100:	94 91       	lpm	r25, Z
#define useVga
//#define useQvga
//#define useQqvga

static inline void serialWrB(uint8_t dat){
	while(!( UCSR0A & (1<<UDRE0)));//wait for byte to transmit
 102:	88 81       	ld	r24, Y
 104:	85 ff       	sbrs	r24, 5
 106:	fd cf       	rjmp	.-6      	; 0x102 <main+0x7e>
	UDR0=dat;
 108:	d8 01       	movw	r26, r16
 10a:	9c 93       	st	X, r25
	while(!( UCSR0A & (1<<UDRE0)));//wait for byte to transmit
 10c:	88 81       	ld	r24, Y
 10e:	85 ff       	sbrs	r24, 5
 110:	fd cf       	rjmp	.-6      	; 0x10c <main+0x88>
	
}
static void StringPgm(const char * str){
	do{
		serialWrB(pgm_read_byte_near(str));
	}while(pgm_read_byte_near(++str));
 112:	31 96       	adiw	r30, 0x01	; 1
 114:	84 91       	lpm	r24, Z
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
	
}
static void StringPgm(const char * str){
	do{
 116:	81 11       	cpse	r24, r1
 118:	f3 cf       	rjmp	.-26     	; 0x100 <main+0x7c>
#elif defined(useQqvga)
	uint8_t buf[320];
#endif
	StringPgm(PSTR("RDY"));
	//Wait for vsync it is on pin 3 (counting from 0) portD
	while(!(PIND&8));//wait for high
 11a:	4b 9b       	sbis	0x09, 3	; 9
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x96>
	while((PIND&8));//wait for low
 11e:	4b 99       	sbic	0x09, 3	; 9
 120:	fe cf       	rjmp	.-4      	; 0x11e <main+0x9a>
 122:	ef ed       	ldi	r30, 0xDF	; 223
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0xa8>
#ifdef useVga
	while(hg--){
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	40 f3       	brcs	.-48     	; 0xfc <main+0x78>
		lg2=wg;
		while(lg2--){
			if(hg%10==0){
 12c:	9f 01       	movw	r18, r30
 12e:	ad ec       	ldi	r26, 0xCD	; 205
 130:	bc ec       	ldi	r27, 0xCC	; 204
 132:	0e 94 2e 01 	call	0x25c	; 0x25c <__umulhisi3>
 136:	bc 01       	movw	r22, r24
 138:	76 95       	lsr	r23
 13a:	67 95       	ror	r22
 13c:	76 95       	lsr	r23
 13e:	67 95       	ror	r22
 140:	76 95       	lsr	r23
 142:	67 95       	ror	r22
 144:	cb 01       	movw	r24, r22
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	68 0f       	add	r22, r24
 158:	79 1f       	adc	r23, r25
 15a:	cf 01       	movw	r24, r30
 15c:	86 1b       	sub	r24, r22
 15e:	97 0b       	sbc	r25, r23
 160:	bc 01       	movw	r22, r24
 162:	20 e5       	ldi	r18, 0x50	; 80
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <main+0xea>
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	31 09       	sbc	r19, r1
	while(!(PIND&8));//wait for high
	while((PIND&8));//wait for low
#ifdef useVga
	while(hg--){
		lg2=wg;
		while(lg2--){
 16c:	e9 f2       	breq	.-70     	; 0x128 <main+0xa4>
			if(hg%10==0){
 16e:	61 15       	cp	r22, r1
 170:	71 05       	cpc	r23, r1
 172:	41 f5       	brne	.+80     	; 0x1c4 <main+0x140>
			while((PIND&4));//wait for low // Packet 1
 174:	4a 99       	sbic	0x09, 2	; 9
 176:	fe cf       	rjmp	.-4      	; 0x174 <main+0xf0>
			while(!(PIND&4));//wait for high
 178:	4a 9b       	sbis	0x09, 2	; 9
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0xf4>
			while((PIND&4));//wait for low  //Packet 2
 17c:	4a 99       	sbic	0x09, 2	; 9
 17e:	fe cf       	rjmp	.-4      	; 0x17c <main+0xf8>
			UDR0=(PINC&15)|(PIND&240);
 180:	46 b1       	in	r20, 0x06	; 6
 182:	99 b1       	in	r25, 0x09	; 9
 184:	4f 70       	andi	r20, 0x0F	; 15
 186:	90 7f       	andi	r25, 0xF0	; 240
 188:	94 2b       	or	r25, r20
 18a:	d8 01       	movw	r26, r16
 18c:	9c 93       	st	X, r25
			while(!(PIND&4));//wait for high
 18e:	4a 9b       	sbis	0x09, 2	; 9
 190:	fe cf       	rjmp	.-4      	; 0x18e <main+0x10a>
			while((PIND&4));//wait for low //Packet 3
 192:	4a 99       	sbic	0x09, 2	; 9
 194:	fe cf       	rjmp	.-4      	; 0x192 <main+0x10e>
			while(!(PIND&4));//wait for high
 196:	4a 9b       	sbis	0x09, 2	; 9
 198:	fe cf       	rjmp	.-4      	; 0x196 <main+0x112>
			while((PIND&4));//wait for low // Packet 4
 19a:	4a 99       	sbic	0x09, 2	; 9
 19c:	fe cf       	rjmp	.-4      	; 0x19a <main+0x116>
			while(!(PIND&4));//wait for high
 19e:	4a 9b       	sbis	0x09, 2	; 9
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <main+0x11a>
			
			while((PIND&4));//wait for low // Packet 5
 1a2:	4a 99       	sbic	0x09, 2	; 9
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <main+0x11e>
			while(!(PIND&4));//wait for high
 1a6:	4a 9b       	sbis	0x09, 2	; 9
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <main+0x122>
			while((PIND&4));//wait for low // Packet 6
 1aa:	4a 99       	sbic	0x09, 2	; 9
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <main+0x126>
			while(!(PIND&4));//wait for high
 1ae:	4a 9b       	sbis	0x09, 2	; 9
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <main+0x12a>
			while((PIND&4));//wait for low // Packet 7
 1b2:	4a 99       	sbic	0x09, 2	; 9
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <main+0x12e>
			while(!(PIND&4));//wait for high
 1b6:	4a 9b       	sbis	0x09, 2	; 9
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <main+0x132>
			while((PIND&4));//wait for low // Packet 8
 1ba:	4a 99       	sbic	0x09, 2	; 9
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <main+0x136>
			while(!(PIND&4));//wait for high
 1be:	4a 9b       	sbis	0x09, 2	; 9
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <main+0x13a>
 1c2:	d2 cf       	rjmp	.-92     	; 0x168 <main+0xe4>
			}
			else{
				while((PIND&4));//wait for low // Packet 1
 1c4:	4a 99       	sbic	0x09, 2	; 9
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <main+0x140>
				while(!(PIND&4));//wait for high
 1c8:	4a 9b       	sbis	0x09, 2	; 9
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <main+0x144>
				while((PIND&4));//wait for low  //Packet 2
 1cc:	4a 99       	sbic	0x09, 2	; 9
 1ce:	fe cf       	rjmp	.-4      	; 0x1cc <main+0x148>
			//	UDR0=(PINC&15)|(PIND&240);
				while(!(PIND&4));//wait for high
 1d0:	4a 9b       	sbis	0x09, 2	; 9
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <main+0x14c>
				while((PIND&4));//wait for low //Packet 3
 1d4:	4a 99       	sbic	0x09, 2	; 9
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <main+0x150>
				while(!(PIND&4));//wait for high
 1d8:	4a 9b       	sbis	0x09, 2	; 9
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <main+0x154>
				while((PIND&4));//wait for low // Packet 4
 1dc:	4a 99       	sbic	0x09, 2	; 9
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <main+0x158>
				while(!(PIND&4));//wait for high
 1e0:	4a 9b       	sbis	0x09, 2	; 9
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <main+0x15c>
				
				while((PIND&4));//wait for low // Packet 5
 1e4:	4a 99       	sbic	0x09, 2	; 9
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <main+0x160>
				while(!(PIND&4));//wait for high
 1e8:	4a 9b       	sbis	0x09, 2	; 9
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0x164>
				while((PIND&4));//wait for low // Packet 6
 1ec:	4a 99       	sbic	0x09, 2	; 9
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <main+0x168>
				while(!(PIND&4));//wait for high
 1f0:	4a 9b       	sbis	0x09, 2	; 9
 1f2:	fe cf       	rjmp	.-4      	; 0x1f0 <main+0x16c>
				while((PIND&4));//wait for low // Packet 7
 1f4:	4a 99       	sbic	0x09, 2	; 9
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <main+0x170>
				while(!(PIND&4));//wait for high
 1f8:	4a 9b       	sbis	0x09, 2	; 9
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <main+0x174>
				while((PIND&4));//wait for low // Packet 8
 1fc:	4a 99       	sbic	0x09, 2	; 9
 1fe:	fe cf       	rjmp	.-4      	; 0x1fc <main+0x178>
				while(!(PIND&4));//wait for high
 200:	4a 9b       	sbis	0x09, 2	; 9
 202:	fe cf       	rjmp	.-4      	; 0x200 <main+0x17c>
 204:	b1 cf       	rjmp	.-158    	; 0x168 <main+0xe4>

00000206 <_ZL8errorLedv>:
			wrReg(REG_COM3,4);	// REG_COM3 enable scaling
			wrSensorRegs8_8(qvga_ov7670);
		break;
		case QQVGA:
			wrReg(REG_COM3,4);	// REG_COM3 enable scaling
			wrSensorRegs8_8(qqvga_ov7670);
 206:	25 9a       	sbi	0x04, 5	; 4
 208:	90 e2       	ldi	r25, 0x20	; 32
 20a:	85 b1       	in	r24, 0x05	; 5
 20c:	89 27       	eor	r24, r25
 20e:	85 b9       	out	0x05, r24	; 5
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	31 ee       	ldi	r19, 0xE1	; 225
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	21 50       	subi	r18, 0x01	; 1
 218:	30 40       	sbci	r19, 0x00	; 0
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <_ZL8errorLedv+0x10>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <_ZL8errorLedv+0x1a>
 220:	00 00       	nop
 222:	f3 cf       	rjmp	.-26     	; 0x20a <_ZL8errorLedv+0x4>

00000224 <_ZL8twiStartv>:
 224:	84 ea       	ldi	r24, 0xA4	; 164
 226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 22a:	ec eb       	ldi	r30, 0xBC	; 188
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	88 23       	and	r24, r24
 232:	ec f7       	brge	.-6      	; 0x22e <_ZL8twiStartv+0xa>
 234:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 238:	88 7f       	andi	r24, 0xF8	; 248
 23a:	88 30       	cpi	r24, 0x08	; 8
 23c:	11 f0       	breq	.+4      	; 0x242 <_ZL8twiStartv+0x1e>
 23e:	0e 94 03 01 	call	0x206	; 0x206 <_ZL8errorLedv>
 242:	08 95       	ret

00000244 <_Z7camInitv>:
	if ((TWSR & 0xF8) != type)
		errorLed();
}
void wrReg(uint8_t reg,uint8_t dat){
	//send start condition
	twiStart();
 244:	0e 94 12 01 	call	0x224	; 0x224 <_ZL8twiStartv>
	//twiWriteByte(OV7670_I2C_ADDRESS<<1,TW_MT_SLA_ACK);
	//twiWriteByte(reg,TW_MT_DATA_ACK);
	//twiWriteByte(dat,TW_MT_DATA_ACK);
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);//send stop
 248:	84 e9       	ldi	r24, 0x94	; 148
 24a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 24e:	8f e9       	ldi	r24, 0x9F	; 159
 250:	9f e0       	ldi	r25, 0x0F	; 15
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <_Z7camInitv+0xe>
 256:	00 c0       	rjmp	.+0      	; 0x258 <_Z7camInitv+0x14>
 258:	00 00       	nop
 25a:	08 95       	ret

0000025c <__umulhisi3>:
 25c:	a2 9f       	mul	r26, r18
 25e:	b0 01       	movw	r22, r0
 260:	b3 9f       	mul	r27, r19
 262:	c0 01       	movw	r24, r0
 264:	a3 9f       	mul	r26, r19
 266:	70 0d       	add	r23, r0
 268:	81 1d       	adc	r24, r1
 26a:	11 24       	eor	r1, r1
 26c:	91 1d       	adc	r25, r1
 26e:	b2 9f       	mul	r27, r18
 270:	70 0d       	add	r23, r0
 272:	81 1d       	adc	r24, r1
 274:	11 24       	eor	r1, r1
 276:	91 1d       	adc	r25, r1
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
